// <auto-generated />
using System;
using F1Management.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace F1Management.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20210827103211_InitialMigration")]
    partial class InitialMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.9")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("F1Management.Core.Models.Car.Chassis", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BodyWork")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FrontWing")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RaceCarId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RearWing")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Wear")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("RaceCarId")
                        .IsUnique();

                    b.ToTable("Chassis");
                });

            modelBuilder.Entity("F1Management.Core.Models.Car.Engine", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Brand")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("HorsePower")
                        .HasColumnType("int");

                    b.Property<Guid>("RaceCarId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Wear")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("RaceCarId")
                        .IsUnique();

                    b.ToTable("Engines");
                });

            modelBuilder.Entity("F1Management.Core.Models.Car.Gearbox", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("GearCount")
                        .HasColumnType("int");

                    b.Property<Guid>("RaceCarId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Wear")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("RaceCarId")
                        .IsUnique();

                    b.ToTable("Gearboxes");
                });

            modelBuilder.Entity("F1Management.Core.Models.Car.RaceCar", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("RaceCars");
                });

            modelBuilder.Entity("F1Management.Core.Models.Car.Tire", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Brand")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RaceCarId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<double>("Wear")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("RaceCarId");

                    b.ToTable("Tires");
                });

            modelBuilder.Entity("F1Management.Core.Models.Roles.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("F1Management.Core.Models.Session", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Position")
                        .HasColumnType("int");

                    b.Property<Guid>("RaceCarId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RaceId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RaceCarId");

                    b.HasIndex("RaceId");

                    b.ToTable("Sessions");
                });

            modelBuilder.Entity("F1Management.Core.Race", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CircuitName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Races");
                });

            modelBuilder.Entity("F1Management.Core.Team", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Points")
                        .HasColumnType("int");

                    b.Property<int>("Ranking")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("F1Management.Core.TeamMember", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TeamId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId")
                        .IsUnique();

                    b.HasIndex("TeamId");

                    b.ToTable("TeamMembers");

                    b.HasDiscriminator<string>("Discriminator").HasValue("TeamMember");
                });

            modelBuilder.Entity("F1Management.Core.Models.Roles.Driver", b =>
                {
                    b.HasBaseType("F1Management.Core.TeamMember");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<int>("Points")
                        .HasColumnType("int");

                    b.Property<Guid>("RaceCarId")
                        .HasColumnType("uniqueidentifier");

                    b.HasIndex("RaceCarId")
                        .IsUnique()
                        .HasFilter("[RaceCarId] IS NOT NULL");

                    b.HasDiscriminator().HasValue("Driver");
                });

            modelBuilder.Entity("F1Management.Core.Models.Car.Chassis", b =>
                {
                    b.HasOne("F1Management.Core.Models.Car.RaceCar", "RaceCar")
                        .WithOne("Chassis")
                        .HasForeignKey("F1Management.Core.Models.Car.Chassis", "RaceCarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RaceCar");
                });

            modelBuilder.Entity("F1Management.Core.Models.Car.Engine", b =>
                {
                    b.HasOne("F1Management.Core.Models.Car.RaceCar", "RaceCar")
                        .WithOne("Engine")
                        .HasForeignKey("F1Management.Core.Models.Car.Engine", "RaceCarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RaceCar");
                });

            modelBuilder.Entity("F1Management.Core.Models.Car.Gearbox", b =>
                {
                    b.HasOne("F1Management.Core.Models.Car.RaceCar", "RaceCar")
                        .WithOne("Gearbox")
                        .HasForeignKey("F1Management.Core.Models.Car.Gearbox", "RaceCarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RaceCar");
                });

            modelBuilder.Entity("F1Management.Core.Models.Car.Tire", b =>
                {
                    b.HasOne("F1Management.Core.Models.Car.RaceCar", "RaceCar")
                        .WithMany("Tires")
                        .HasForeignKey("RaceCarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RaceCar");
                });

            modelBuilder.Entity("F1Management.Core.Models.Session", b =>
                {
                    b.HasOne("F1Management.Core.Models.Car.RaceCar", "RaceCar")
                        .WithMany("Sessions")
                        .HasForeignKey("RaceCarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("F1Management.Core.Race", "Race")
                        .WithMany("Sessions")
                        .HasForeignKey("RaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Race");

                    b.Navigation("RaceCar");
                });

            modelBuilder.Entity("F1Management.Core.TeamMember", b =>
                {
                    b.HasOne("F1Management.Core.Models.Roles.Role", "Role")
                        .WithOne("TeamMember")
                        .HasForeignKey("F1Management.Core.TeamMember", "RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("F1Management.Core.Team", "Team")
                        .WithMany("TeamMembers")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("F1Management.Core.Models.Roles.Driver", b =>
                {
                    b.HasOne("F1Management.Core.Models.Car.RaceCar", "RaceCar")
                        .WithOne("Driver")
                        .HasForeignKey("F1Management.Core.Models.Roles.Driver", "RaceCarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RaceCar");
                });

            modelBuilder.Entity("F1Management.Core.Models.Car.RaceCar", b =>
                {
                    b.Navigation("Chassis");

                    b.Navigation("Driver");

                    b.Navigation("Engine");

                    b.Navigation("Gearbox");

                    b.Navigation("Sessions");

                    b.Navigation("Tires");
                });

            modelBuilder.Entity("F1Management.Core.Models.Roles.Role", b =>
                {
                    b.Navigation("TeamMember");
                });

            modelBuilder.Entity("F1Management.Core.Race", b =>
                {
                    b.Navigation("Sessions");
                });

            modelBuilder.Entity("F1Management.Core.Team", b =>
                {
                    b.Navigation("TeamMembers");
                });
#pragma warning restore 612, 618
        }
    }
}
